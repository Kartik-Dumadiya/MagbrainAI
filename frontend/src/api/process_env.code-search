# Query: process.env
# ContextLines: 1

40 results - 16 files

backend\index_by_sumit.js:
   29    session({
   30:     secret: process.env.SESSION_SECRET,
   31      resave: false,

   43  // MongoDB connection setup
   44: mongoose.connect(process.env.MONGODB_URI, {
   45    useNewUrlParser: true,

  185      {
  186:       clientID: process.env.GOOGLE_CLIENT_ID,
  187:       clientSecret: process.env.GOOGLE_CLIENT_SECRET,
  188:       callbackURL: `${process.env.VITE_API_URL || "http://localhost:3000"}/auth/google/secrets`,
  189        userProfileURL: "https://www.googleapis.com/oauth2/v3/userinfo",

backend\server.js:
  14  
  15: app.use(cors({ origin: process.env.VITE_API_URL ||  "http://localhost:5173", credentials: true }));
  16: // console.log("CORS enabled for origin:", process.env.VITE_API_URL || "http://localhost:5173");
  17  app.use(express.json());

  20    session({
  21:     secret: process.env.SESSION_SECRET || "TOPSECRETWORD",
  22      resave: false,

  39  mongoose
  40:   .connect(process.env.MONGODB_URI, {})
  41    .then(() => console.log("Connected to MongoDB"))

  43  
  44: const PORT = process.env.PORT || 3000;
  45  app.listen(PORT, () => {

backend\config\passport.js:
   35      {
   36:       clientID: process.env.GOOGLE_CLIENT_ID,
   37:       clientSecret: process.env.GOOGLE_CLIENT_SECRET,
   38:       callbackURL: `${process.env.VITE_API_URL || "http://localhost:3000"}/auth/google/secrets`,
   39        userProfileURL: "https://www.googleapis.com/oauth2/v3/userinfo",

   72      {
   73:       clientID: process.env.GITHUB_CLIENT_ID,
   74:       clientSecret: process.env.GITHUB_CLIENT_SECRET,
   75        callbackURL: "/auth/github/callback",

  102  //       tokenURL: "https://api.dropbox.com/oauth2/token",
  103: //       clientID: process.env.DROPBOX_CLIENT_ID,
  104: //       clientSecret: process.env.DROPBOX_CLIENT_SECRET,
  105  //       callbackURL: "/auth/dropbox/callback",

backend\controllers\authController.js:
  5  const generateToken = (user) => {
  6:   return jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "1d" });
  7  };

backend\middleware\authMiddleware.js:
  8    try {
  9:     const decoded = jwt.verify(token, process.env.JWT_SECRET);
  10      req.user = await User.findById(decoded.id).select("-password"); // do not expose hash

frontend\src\api\agentApi.jsx:
  3  export const updateAgent = (bot_id, data) =>
  4:   axios.put(`${ import.meta.env.VITE_API_URL || "http://localhost:3000"}/agents/${bot_id}`, data, { withCredentials: true });

frontend\src\api\flowDesignerApi.jsx:
  1  import axios from "axios";
  2: const BASE_URL = import.meta.env.VITE_API_URL || "http://localhost:3000";
  3  

frontend\src\components\SigninForm.jsx:
  22        const response = await axios.post(
  23:         `${import.meta.env.VITE_API_URL || "http://localhost:3000"}/auth/login`,
  24          formData,

frontend\src\components\SignupForm.jsx:
  31        const response = await axios.post(
  32:         `${import.meta.env.VITE_API_URL || "http://localhost:3000"}/auth/signup`,
  33          formData,

frontend\src\context\UserContext.jsx:
  13          try {
  14:             const res = await axios.get(`${import.meta.env.VITE_API_URL || "http://localhost:3000"}/auth/me`, { withCredentials: true });
  15              setUser(res.data.user);

frontend\src\pages\AgentPageRouter.jsx:
  13    useEffect(() => {
  14:     axios.get(`${import.meta.env.VITE_API_URL || "http://localhost:3000"}/agents/${bot_id}`, { withCredentials: true })
  15        .then(res => { setAgent(res.data.agent); setLoading(false); })

frontend\src\pages\AgentsPage.jsx:
   83          try {
   84:             const res = await axios.post(`${import.meta.env.VITE_API_URL || "http://localhost:3000"}/agents`, agentData, { withCredentials: true });
   85              const bot_id = res.data.agent.bot_id;

  101          try {
  102:             await axios.delete(`${import.meta.env.VITE_API_URL || "http://localhost:3000"}/agents/${agent.bot_id}`, { withCredentials: true });
  103              setAgents((prev) => prev.filter((a) => a.bot_id !== agent.bot_id));

  116          try {
  117:             await axios.delete(`${import.meta.env.VITE_API_URL || "http://localhost:3000"}/agents/${agent.bot_id}`, { withCredentials: true });
  118              setAgents((prev) => prev.filter((a) => a.bot_id !== agent.bot_id));

  126              axios
  127:             .get(`${import.meta.env.VITE_API_URL || "http://localhost:3000"}/agents`, { withCredentials: true })
  128              .then((res) =>setAgents(res.data.agents))

frontend\src\pages\ProfilePage.jsx:
   70      try {
   71:       const res = await axios.put(`${import.meta.env.VITE_API_URL || "http://localhost:3000"}/auth/me`, profile, { withCredentials: true });
   72        setUser(res.data.user);

   94      try {
   95:       await axios.put(`${import.meta.env.VITE_API_URL || "http://localhost:3000"}/auth/me/password`, passwords, { withCredentials: true });
   96        setPassMsg("Password updated!");

  106      try {
  107:       await axios.post(`${import.meta.env.VITE_API_URL || "http://localhost:3000"}/auth/logout`, {}, { withCredentials: true });
  108        toast.success("Logged out successfully!");

frontend\src\pages\SigninPage.jsx:
  19      alt: "Sign in with Google",
  20:     href: `${import.meta.env.VITE_API_URL || "http://localhost:3000"}/auth/google`,
  21    },

  26      alt: "Sign in with GitHub",
  27:     href: `${import.meta.env.VITE_API_URL || "http://localhost:3000"}/auth/github`,
  28    },

  33      alt: "Sign in with Dropbox",
  34:     href: `${import.meta.env.VITE_API_URL || "http://localhost:3000"}/auth/dropbox`,
  35    },

frontend\src\pages\SignupPage.jsx:
  13  const icons = [
  14:   { id: "google", light: googleLight, bold: googleBold, alt: "Sign up with Google", href: `${import.meta.env.VITE_API_URL || "http://localhost:3000"}/auth/google` },
  15:   { id: "github", light: githubLight, bold: githubBold, alt: "Sign up with GitHub", href: `${import.meta.env.VITE_API_URL || "http://localhost:3000"}/auth/github` },
  16:   { id: "dropbox", light: dropboxLight, bold: dropboxBold, alt: "Sign up with Dropbox", href: `${import.meta.env.VITE_API_URL || "http://localhost:3000"}/auth/dropbox` },
  17  ];

frontend\src\pages\SinglePromptAgentPage.jsx:
  48    useEffect(() => {
  49:     axios.get(`${import.meta.env.VITE_API_URL || "http://localhost:3000"}/agents/${bot_id}`, { withCredentials: true })
  50        .then(res => setAgent(res.data.agent))

  63      try {
  64:       await axios.put(`${import.meta.env.VITE_API_URL || "http://localhost:3000"}/agents/${bot_id}`, agent, { withCredentials: true });
  65        setShowSaveToast(true);
